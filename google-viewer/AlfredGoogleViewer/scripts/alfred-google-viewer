#!/usr/bin/python3

import alfred
import json
import os
import subprocess
import sys
import urllib.parse
import uuid
import logging

# create an instance of the logger
logger = logging.getLogger()

# logging set up 
log_format = logging.Formatter('%(asctime)-15s %(levelname)-2s %(message)s')
sh = logging.StreamHandler()
sh.setFormatter(log_format)

# add the handler
logger.addHandler(sh)
logger.setLevel(logging.INFO)

if __name__ == '__main__':
  '''
  Environment variables to be set by callers:

  Optional:
    - basedir: relative html paths will be resolved wrt this
               defaults to workflow dir

  Mandatory:
    - arg: the argument is passed to the script filter
  '''
  alfreditems = json.load(sys.stdin)
  rawQuery = alfreditems['items'][0]['rawQuery']

  cssfilepath = '/tmp/%s.css' % str(uuid.uuid4())
  with open(cssfilepath, 'w') as tmpfile: tmpfile.write(alfred.theme_css())

  bkgColor = alfred.theme()['window.color']
  bkgColorWithoutAlpha = bkgColor[:-2]

try:
  # https://stackoverflow.com/a/50466440
  urllib.parse.quote_plus = urllib.parse.quote
  subprocess.call([
    'open', '-g',
    'alfred-google-viewer://update?%s' % urllib.parse.urlencode({
      'rawQuery': rawQuery,
      'cssFile': cssfilepath,
      'bkgColor': bkgColorWithoutAlpha
    })
  ])
except subprocess.CalledProcessError as exc:
    print("Status : FAIL", exc.returncode, exc.output)
else:
  print(json.dumps(alfreditems, indent=2))
  sys.stdout.flush()
